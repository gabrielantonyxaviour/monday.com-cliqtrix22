
if(form.get("name") == "ArchiveBoard")
{
	name = form.get("values").get("BoardName").get("label");
	id = form.get("values").get("BoardName").get("value");
	archiveboard = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"mutation { archive_board (board_id:" + id + ") { id }}"}
		connection:"write_users_board_data"
	];
	card = Map();
	response = Map();
	response.put("card",card);
	card.put("theme","prompt");
	card.put("thumbnail","https://i.pinimg.com/originals/70/a5/52/70a552e8e955049c8587b2d7606cd6a6.gif");
	card.put("title","Success ;))");
	response.put("text","The board *" + name + "* is archived! :wink!:");
}
else if(form.get("name") == "DuplicateBoard")
{
	response = Map();
	name = form.get("values").get("BoardName").get("label");
	id = form.get("values").get("BoardName").get("value");
	newname = form.get("values").get("NewBoardName");
	keepsubs = form.get("values").get("KeepSubs").get("value");
	structure = form.get("values").get("Structure").get("value");
	if(keepsubs == "clear")
	{
		keep = false;
	}
	else
	{
		keep = true;
	}
	duplicateboard = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"mutation { duplicate_board(board_id:" + id + ", board_name:" + newname + " ,duplicate_type: " + structure + ",keep_subscribers:" + keep + " ) { board { id }}}"}
		connection:"write_users_board_data"
	];
	info duplicateboard;
	card = Map();
	response = Map();
	response.put("card",card);
	card.put("theme","prompt");
	card.put("thumbnail","https://i.pinimg.com/originals/70/a5/52/70a552e8e955049c8587b2d7606cd6a6.gif");
	card.put("title","Success ;))");
	response.put("text","Old Board: *" + name + "*\n" + "Duplicated Board: *" + newname + "*\n\nThe board is successfully duplicated :wink!:");
}
else if(form.get("name") == "CreateBoard")
{
	info form;
	response = Map();
	name = form.get("values").get("BoardName");
	description = form.get("values").get("Description");
	newBoard = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"mutation { create_board (board_name: \"" + name + "\", board_kind: public) { id }}"}
		connection:"write_users_board_data"
	];
	info newBoard;
	boardid = newBoard.get("data").get("create_board").get("id");
	boarddescription = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"mutation {\n  update_board(board_id: " + boardid + ", board_attribute: description, new_value: \"" + description + "\")\n}"}
		connection:"write_users_board_data"
	];
	response = Map();
	Card = Map();
	Card.put("title","Success");
	Card.put("theme","prompt");
	MYURL = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { me {url id}}"}
		connection:"read_personal_info"
	];
	myurl = MYURL.get("data").get("me").get("url");
	IDD = MYURL.get("data").get("me").get("id").toString();
	IDD = "/users/" + IDD;
	myurl = myurl.replaceAll(IDD,"/");
	Card.put("thumbnail","https://static.dribbble.com/users/147386/screenshots/5315437/success-tick-dribbble.gif");
	response.put("card",Card);
	response.put("text","Wohooo! you have succesfully created the board :grinning!: \n\n Name: *" + name + "* \n Type: *public* \n \nClick [here](" + myurl + "/boards/" + boardid + ") to preview your board and add subscribers :cool!:");
}
else if(form.get("name") == "ReadBoard")
{
	boardid = form.get("values").get("BoardName").get("value");
	name = form.get("values").get("BoardName").get("label");
	readboard = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { boards (ids: " + boardid + ") { items{id name column_values{title text }}}}"}
		connection:"read_users_board_data"
	];
	info readboard;
	items = readboard.get("data").get("boards").get(0).get("items");
	columns = items.get(0).get("column_values");
	head = list();
	head.add("Id");
	head.add("Item Name");
	for each  column in columns
	{
		head.add(column.get("title"));
	}
	entries = List();
	for each  item in items
	{
		entry = Map();
		entry.put("Id",item.get("id"));
		entry.put("Item Name",item.get("name"));
		columns = item.get("column_values");
		for each  column in columns
		{
			if(column.get("text") == null)
			{
				column.put("text","-");
			}
			entry.put(column.get("title"),column.get("text"));
		}
		entries.add(entry);
	}
	MYURL = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { me {url id}}"}
		connection:"read_personal_info"
	];
	myurl = MYURL.get("data").get("me").get("url");
	IDD = MYURL.get("data").get("me").get("id").toString();
	IDD = "/users/" + IDD;
	myurl = myurl.replaceAll(IDD,"/");
	response = {"text":"Tap on the table to view it more clearly.\n\nClick [here](" + myurl + "boards/" + boardid + ") to view the board in monday","card":{"title":"Monday Boards","theme":"modern-inline","thumbnail":"https://media0.giphy.com/media/3ohhwJbytwUSJyvvHi/source.gif"},"slides":{{"type":"table","title":name,"data":{"headers":head,"rows":entries}}}};
}
else if(form.get("name") == "UpdateBoard")
{
	boardid = form.get("values").get("BoardName").get("value");
	name = form.get("values").get("BoardName").get("label");
	info form;
	response = Map();
	card = Map();
	response.put("card",card);
	card.put("title","Updating Monday Boards");
	card.put("theme","prompt");
	card.put("thumbnail","https://gifimage.net/wp-content/uploads/2018/06/update-gif-11.gif");
	MYURL = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { me {url id}}"}
		connection:"read_personal_info"
	];
	myurl = MYURL.get("data").get("me").get("url");
	IDD = MYURL.get("data").get("me").get("id").toString();
	IDD = "/users/" + IDD;
	myurl = myurl.replaceAll(IDD,"/");
	response.put("text","I'm afraid we can't edit boards here in cliq. :worry!: \n\n You will get a more versatile user experience if you edit boards directly from monday. :cool!: \n\nBoard Name: *" + name + "* \nBoard Id: *" + boardid + "* \n\nClick [here](" + myurl + "boards/" + boardid + ") to go directly to the board and edit it right away!");
}
else if(form.get("name") == "AddSubscribers")
{
	boardid = form.get("values").get("BoardName").get("value");
	members = form.get("values").get("ChooseMembers");
	memberids = "[";
	flag = "Yes";
	for each  member in members
	{
		if(flag == "Yes")
		{
			memberids = memberids + member.get("value");
		}
		else
		{
			memberids = memberids + "," + member.get("value");
		}
		flag = "No";
	}
	memberids = memberids + "]";
	kind = form.get("values").get("ChooseRole").get("value");
	addsubs = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"mutation { add_subscribers_to_board(board_id: " + boardid + ", user_ids: " + memberids + ",kind:" + kind + ") { id }}"}
		connection:"write_users_board_data"
	];
	data = addsubs.get("data").get("add_subscribers_to_board");
	response = Map();
	card = Map();
	card.put("theme","prompt");
	card.put("title","Success :wink!:");
	response.put("text","The members have been successfully added");
	card.put("thumbnail","https://static.dribbble.com/users/147386/screenshots/5315437/success-tick-dribbble.gif");
	response.put("card",card);
}
else if(form.get("name") == "RemoveSubscribers")
{
	response = Map();
	boardid = form.get("values").get("BoardName").get("value");
	members = form.get("values").get("ChooseMembers");
	memberids = "[";
	flag = "Yes";
	for each  member in members
	{
		if(flag == "Yes")
		{
			memberids = memberids + member.get("value");
		}
		else
		{
			memberids = memberids + "," + member.get("value");
		}
		flag = "No";
	}
	memberids = memberids + "]";
	removesubs = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"mutation { delete_subscribers_from_board(board_id: " + boardid + ", user_ids: " + memberids + ") { id }}"}
		connection:"write_users_board_data"
	];
	data = removesubs.get("data").get("delete_subscribers_from_board");
	response = Map();
	card = Map();
	card.put("theme","prompt");
	card.put("title","Success :wink!:");
	response.put("text","The members have been successfully deleted :smile!:");
	card.put("thumbnail","https://static.dribbble.com/users/147386/screenshots/5315437/success-tick-dribbble.gif");
	response.put("card",card);
}
else if(form.get("name") == "ReadUpdates" || form.get("name") == "WriteUpdates" || form.get("name") == "DeleteUpdates")
{
	boardid = form.get("values").get("BoardName").get("value");
	items = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { boards (ids: " + boardid + ") { items{ name id } }}"}
		connection:"read_users_board_data"
	];
	items = items.get("data").get("boards").get(0).get("items");
	opt = List();
	for each  item in items
	{
		opt.add({"label":item.get("name"),"value":item.get("id")});
	}
	chooseitem = {"type":"dynamic_select","name":"ItemName","label":"Item","hint":"Select a item","placeholder":"Select a item","mandatory":true,"value":"","options":opt};
	if(form.get("name") == "ReadUpdates")
	{
		return {"type":"form","title":"Read Updates","hint":"Choose an item to view updates","name":"ReadUpdates2","version":1,"button_label":"Confirm","action":{"type":"invoke.function","name":"mboardactions"},"inputs":{chooseitem}};
	}
	else if(form.get("name") == "WriteUpdates")
	{
		inputs = List();
		inputs.add(chooseitem);
		inputs.add({"type":"textarea","name":"Update","label":"Update","hint":"Write your update here","placeholder":"Write your update here","mandatory":true,"value":""});
		return {"type":"form","title":"Write Updates","hint":"Choose an item to write updates","name":"WriteUpdates2","version":1,"button_label":"Confirm","action":{"type":"invoke.function","name":"mboardactions"},"inputs":inputs};
	}
	else if(form.get("name") == "DeleteUpdates")
	{
		return {"type":"form","title":"Delete Updates","hint":"Choose an item to select updates to delete","name":"DeleteUpdates2","version":1,"button_label":"Confirm","action":{"type":"invoke.function","name":"mboardactions"},"inputs":{chooseitem}};
	}
}
else if(form.get("name") == "ReadUpdates2")
{
	response = Map();
	card = Map();
	response.put("card",card);
	card.put("thumbnail","https://gifimage.net/wp-content/uploads/2018/06/update-gif-4.gif");
	card.put("theme","prompt");
	card.put("title","Board Updates");
	itemid = form.get("values").get("ItemName").get("value");
	itemname = form.get("values").get("ItemName").get("label");
	MYURL = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { me {url id}}"}
		connection:"read_personal_info"
	];
	myurl = MYURL.get("data").get("me").get("url");
	myid = MYURL.get("data").get("me").get("id").toString();
	myid = "/users/" + myid;
	myurl = myurl.replaceAll(myid,"/");
	UPDATES = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { items (ids: " + itemid + ") {board{name id} updates{ creator{name} text_body replies{ creator{name} text_body } } } }"}
		connection:"read_users_board_data"
	];
	updates = UPDATES.get("data").get("items").get(0).get("updates");
	boardname = UPDATES.get("data").get("items").get(0).get("board").get("name");
	boardid = UPDATES.get("data").get("items").get(0).get("board").get("id");
	response_text = "Board Name: *" + boardname + "*\nItem Name: *" + itemname + "* \n\nClick [here](" + myurl + "boards/" + boardid + "/pulses/" + itemid + ") to view updates in Monday. \n\nUPDATES \n";
	info response_text;
	for each  update in updates
	{
		response_text = response_text + "---------------\nCreator: *" + update.get("creator").get("name") + "*\n--Update--\n" + update.get("text_body") + "\n";
		replies = update.get("replies");
		if(!replies.isEmpty())
		{
			response_text = response_text + "\nREPLIES\n\n";
		}
		for each  reply in replies
		{
			response_text = response_text + "Creator: *" + reply.get("creator").get("name") + "*\n--Reply--\n" + reply.get("text_body") + "\n";
		}
	}
	response.put("text",response_text);
}
else if(form.get("name") == "WriteUpdates2")
{
	response = Map();
	card = Map();
	response.put("card",card);
	card.put("thumbnail","https://gifimage.net/wp-content/uploads/2018/06/update-gif-4.gif");
	card.put("theme","prompt");
	card.put("title","Board Updates");
	itemid = form.get("values").get("ItemName").get("value");
	itemname = form.get("values").get("ItemName").get("label");
	update = form.get("values").get("Update");
	UPDATES = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { items (ids: " + itemid + ") {board{name }}}"}
		connection:"read_users_board_data"
	];
	boardname = UPDATES.get("data").get("items").get(0).get("board").get("name");
	writeupdate = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"mutation { create_update (item_id: " + itemid + ", body: \"" + update + "\") { id }}"}
		connection:"write_updates"
	];
	response.put("text","Board Name: *" + boardname + "*\nItem Name: *" + itemname + "* \n\nSuccessfully written the update for the item! :wink!:");
}
else if(form.get("name") == "DeleteUpdates2")
{
	response = Map();
	card = Map();
	response.put("card",card);
	card.put("thumbnail","https://gifimage.net/wp-content/uploads/2018/06/update-gif-4.gif");
	card.put("theme","prompt");
	card.put("title","Board Updates");
	itemid = form.get("values").get("ItemName").get("value");
	itemname = form.get("values").get("ItemName").get("label");
	BOARDNAME = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { items (ids: " + itemid + ") {board{name id }}}"}
		connection:"read_users_board_data"
	];
	MYURL = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { me {url id}}"}
		connection:"read_personal_info"
	];
	myurl = MYURL.get("data").get("me").get("url");
	IDD = MYURL.get("data").get("me").get("id").toString();
	IDD = "/users/" + IDD;
	myurl = myurl.replaceAll(IDD,"/");
	boardname = BOARDNAME.get("data").get("items").get(0).get("board").get("name");
	boardid = BOARDNAME.get("data").get("items").get(0).get("board").get("id");
	response.put("text","Board Name: *" + boardname + "*\nItem Name: *" + itemname + "* \n\n Click [here](" + myurl + "boards/" + boardid + "/pulses/" + itemid + ") to view update and delete updates in a much significant way with better experience");
}
else if(form.get("name") == "MyActLogs")
{
	response = Map();
	boardname = form.get("values").get("BoardName").get("label");
	card = {"theme":"modern-inline","title":"My Activity Logs","thumbnail":"https://cdn.dribbble.com/users/20079/screenshots/1756399/activities.gif"};
	response.put("card",card);
	slides_map = Map();
	slides_map.put("type","table");
	slides_map.put("title",boardname);
	slides = List();
	slides.add(slides_map);
	response.put("slides",slides);
	slides_data = Map();
	slides_map.put("data",slides_data);
	slides_data.put("headers",{"S. no","User Name","Action","Time"});
	rows = List();
	slides_data.put("rows",rows);
	boardid = form.get("values").get("BoardName").get("value");
	response.put("text","\nBoard Name:  *" + boardname + "*\n\nAll the activity performed by you in this board are displayed here. :peace!: ");
	MYID = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { me { id name }}"}
		connection:"read_personal_info"
	];
	myid = MYID.get("data").get("me").get("id");
	myname = MYID.get("data").get("me").get("name");
	myactions = invokeurl
	[
		url :"https://api.monday.com/v2/"
		type :POST
		parameters:{"query":"query { boards(ids:" + boardid + ")	{ activity_logs (user_ids:" + myid + ") { event created_at }}}"}
		connection:"read_users_board_data"
	];
	info myactions;
	MYACTIONS = myactions.get("data").get("boards").get(0).get("activity_logs");
	index = 1;
	unix = '1-Jan-1970 05:30:00';
	for each  myaction in MYACTIONS
	{
		row_data = Map();
		row_data.put("S. no",index);
		row_data.put("User Name",myname);
		rows.add(row_data);
		event = myaction.get("event");
		unixaddseconds = myaction.get("created_at").toNumber() / 10000000;
		created_at = unix.addSeconds(unixaddseconds);
		if(event == "create_pulse")
		{
			act = "A new item was created";
		}
		else if(event == "update_column_value")
		{
			act = "A column value was updated";
		}
		else if(event == "subscribe")
		{
			act = "User is subscribed to a new item";
		}
		else if(event == "unsubscribe")
		{
			act = "User is unsubscribed from an item";
		}
		else if(event == "add_owner")
		{
			act = "A new owner was added to the board";
		}
		else if(event == "create_column")
		{
			act = "A new column was created in the board";
		}
		else if(event == "create_group")
		{
			act = "A new group was created in the board";
		}
		else if(event == "board_view_added")
		{
			act = "A new board view was added in the board";
		}
		else if(event == "Update_name")
		{
			act = "Name of an item was updated";
		}
		else if(event == "update_group_name")
		{
			act = "Name of a group was updated";
		}
		else if(event == "delete_column")
		{
			act = "A new column was deleted in the board";
		}
		else
		{
			act = "An unknown action was performed";
		}
		row_data.put("Action",act);
		row_data.put("Time",created_at.toString());
		index = index + 1;
	}
}
else if(form.get("name") == "AllActLogs")
{
	response = Map();
	boardname = form.get("values").get("BoardName").get("label");
	card = {"theme":"modern-inline","title":"All Activity Logs","thumbnail":"https://cdn.dribbble.com/users/20079/screenshots/1756399/activities.gif"};
	response.put("card",card);
	slides_map = Map();
	slides_map.put("type","table");
	slides_map.put("title",boardname);
	slides = List();
	slides.add(slides_map);
	response.put("slides",slides);
	slides_data = Map();
	slides_map.put("data",slides_data);
	slides_data.put("headers",{"S. no","User Name","Action","Time"});
	rows = List();
	slides_data.put("rows",rows);
	boardid = form.get("values").get("BoardName").get("value");
	response.put("text","\nBoard Name:  *" + boardname + "*\n\nAll the activity performed by everyone in this board are displayed here. :peace!: ");
	MYID = invokeurl
	[
		url :"https://api.monday.com/v2"
		type :POST
		parameters:{"query":"query { me { id name }}"}
		connection:"read_personal_info"
	];
	myid = MYID.get("data").get("me").get("id");
	myname = MYID.get("data").get("me").get("name");
	myactions = invokeurl
	[
		url :"https://api.monday.com/v2/"
		type :POST
		parameters:{"query":"query { boards(ids:" + boardid + ",order_by:used_at)	{ activity_logs { user_id event created_at }}}"}
		connection:"read_users_board_data"
	];
	info myactions;
	MYACTIONS = myactions.get("data").get("boards").get(0).get("activity_logs");
	index = 1;
	unix = '1-Jan-1970 05:30:00';
	for each  myaction in MYACTIONS
	{
		uid = myaction.get("user_id");
		USERNAME = invokeurl
		[
			url :"https://api.monday.com/v2/"
			type :POST
			parameters:{"query":"query { users (ids: " + uid + ") {name}}"}
			connection:"read_users_data"
		];
		username = USERNAME.get("data").get("users").get(0).get("name");
		row_data = Map();
		row_data.put("S. no",index);
		row_data.put("User Name",username);
		rows.add(row_data);
		event = myaction.get("event");
		unixaddseconds = myaction.get("created_at").toNumber() / 10000000;
		created_at = unix.addSeconds(unixaddseconds);
		if(event == "create_pulse")
		{
			act = "A new item was created";
		}
		else if(event == "update_column_value")
		{
			act = "A column value was updated";
		}
		else if(event == "subscribe")
		{
			act = "User is subscribed to a new item";
		}
		else if(event == "unsubscribe")
		{
			act = "User is unsubscribed from an item";
		}
		else if(event == "add_owner")
		{
			act = "A new owner was added to the board";
		}
		else if(event == "create_column")
		{
			act = "A new column was created in the board";
		}
		else if(event == "delete_column")
		{
			act = "A new column was deleted in the board";
		}
		else if(event == "create_group")
		{
			act = "A new group was created in the board";
		}
		else if(event == "board_view_added")
		{
			act = "A new board view was added in the board";
		}
		else if(event == "Update_name")
		{
			act = "Name of an item was updated";
		}
		else if(event == "update_group_name")
		{
			act = "Name of a group was updated";
		}
		else
		{
			act = "An unknown action was performed";
		}
		row_data.put("Action",act);
		row_data.put("Time",created_at.toString());
		index = index + 1;
	}
}
return response;
